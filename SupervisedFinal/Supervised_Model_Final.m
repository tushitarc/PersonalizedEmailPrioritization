%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% @AutoGenerated
%
% Filename: Supervised_Model_Final.m
% Author: Alper Ender
% Date: November 2017
% Description: The final supervised model that will be used.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\

clc; fclose('all');

cd(folder_system.SupervisedTest)

% Percent of the values that are in the training data
PERCENT_TRAIN = 80;
PCA_COUNT = 30;

% Opening the file to read
FID = fopen('Unsupervised Output.csv','r');


%% Importing values

fprintf('Beginning Supervised Model Final...\n')
fprintf('Importing Documents...\n')

% Initalizing variables
counter = 1;
all_emails = {};

% Running through the file
while ~feof(FID)
    
    % Read the line
    line = fgetl(FID);
    
    % Tokenize the line from the delimiter
    tokens = split(line,',');
    
    % Store the eamil
    all_emails(counter,:) = tokens';
    
    % Increment counter
    counter = counter + 1;
    
end

%% Creating the Bag of Words from the dictionary

fprintf('Creating the Dictionary Bag of Words...\n')

% Reading in the dictionary words and tokenizing the words
dictionary = fileread('words.txt');
dict = tokenizedDocument(dictionary);

% Creating a bag of words based off the dictionary values
t_bag = bagOfWords(dict);


%% Creating the documents Bag of Words

fprintf('Creating the Documents Bag of Words...\n')

% Initializing variables
docs = tokenizedDocument;
[r, c] = size(all_emails);

% Go through each email and put into the document list
for i = 1:r
    docs(i,1) = tokenizedDocument(all_emails{i,end-1});
end

% Encode the documents based off the dictionary bag of words
docs_s = encode(t_bag, docs);
all_docs = full(docs_s);

% Obtaining the split val
split_val = floor(r * 0.8);

% Obtaining the training values
train_x = all_docs(1:split_val, :);
train_y = all_emails(1:split_val, end);

% Obtaining the testing values
test_x = all_docs(split_val + 1 : end, :);
test_y = all_emails(split_val + 1 : end, end);


%% Ensemble of Learners for classification tree

fprintf('Creating the Ensemble Model...\n')

% Calculating the pca for the full trained x matrix
[coeff,score,latent,tsquared,explained,mu] = pca(train_x, 'NumComponents', PCA_COUNT);
% whos coeff score latent tsquared explained mu

% Calculating the mean and the total number of important attributes to keep
mean_train_x = mean(train_x);
total_important_values = sum(explained > 1);

% Creating an ensemble model with multiple parameters
templ = templateTree('Surrogate','all');
ens = fitcensemble(score, train_y,'OptimizeHyperparameters','auto');

% Reshaping the testing dataset based upon the pca coefficients
modified_test_x = (test_x - mean_train_x) * coeff;

% Predicting the modified values
predicted_vals = ens.predict(modified_test_x);

% Calculating the number correct and incorrect classifications
comparison = str2double(test_y) == str2double(predicted_vals);
num_incorrect = sum(comparison == 0);
num_correct = sum(comparison == 1);

% Calculating the accuracy for this specific number of pca components
accuracy = (num_correct / length(comparison)) * 100;

% Printing the values
fprintf('Ensemble. Num Components: %d - %.6f%% Accuracy\n', PCA_COUNT, accuracy);


%% Cleanup

fprintf('Completed the Supervised Model.\n')



